// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class KeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: KeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x74, 0xd0, 0xe6, 0x97, 0xd3, 0x4, 0x4d, 0x13, 0x4f, 0x1c, 0x9c, 0x84, 0x57, 0x2, 0xc8, 0xfb, 0xa1, 0x7a, 0xd4, 0x83, 0x6b, 0xe5, 0x87, 0x20, 0x59, 0x1e, 0x7f, 0xc4, 0xf, 0x19, 0xc, 0xc6, 0xf3, 0x1b, 0xc7, 0xa1, 0x5e, 0xc0, 0xae, 0xcd, 0x6d, 0xcd, 0x5, 0xd3, 0x58, 0xd4, 0x32, 0xa7, 0x1, 0x63, 0xe2, 0x6d, 0x10, 0x83, 0xd5, 0x7d, 0x46, 0xe2, 0xd7, 0xc2, 0x58, 0x7a, 0x3, 0xd5
        ]
        globalSecrets = Keys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x17, 0xe9, 0xd2, 0xaf, 0xe4, 0x3c, 0x2c, 0x20, 0x79, 0x7d, 0xf8, 0xb5, 0x65, 0x3a, 0xfc, 0x9f, 0x94, 0x4a, 0xe7, 0xb0, 0x5f, 0xd0, 0xb5, 0x42, 0x69, 0x7f, 0x46, 0xf0, 0x3d, 0x2c, 0x3e, 0xf1, 0xca, 0x78, 0xf6, 0x96, 0x6c, 0xf9, 0xca, 0xfc, 0x54, 0xfd, 0x32, 0xea, 0x3b, 0xe7, 0x6, 0x9e, 0x65, 0x7, 0xd3, 0xc, 0x26, 0xb0, 0xed, 0x4a, 0x25, 0x87, 0xb4, 0xf6, 0x6c, 0x4d, 0x65, 0xb1, 0x4d, 0xb5, 0x83, 0xa7, 0xea, 0x62, 0x7b, 0x75, 0x29, 0x24, 0xac, 0xb5, 0x31, 0x67, 0xff, 0xca, 0xc7, 0x1e, 0xed, 0xb0, 0x5b, 0xd2, 0xbf, 0x45, 0x6a, 0x7c, 0x4c, 0xf4, 0x3b, 0x7f, 0x6a, 0xa5, 0xc5, 0x28, 0xa6, 0x98, 0x6f, 0xa2, 0xca, 0xfc, 0x9, 0xfe, 0x31, 0xb5, 0x61, 0xb2, 0xb, 0x91, 0x34, 0x54, 0xd7, 0x54, 0x28, 0xb0, 0xec, 0x4a, 0x7f, 0xd3, 0xe7, 0xf0, 0x6f, 0x48, 0x36, 0xe6
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "c94878a36ad1284d5033452b0a9425279c1729d19079c349dd1a6387cec447fd9ee09f6ff801fe71fd93078e3b304ffc63a91bd1d34f9f965759839791027253")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x38, 0xb7, 0x84, 0xae, 0xbe, 0x40, 0x1f, 0x43, 0x2a, 0x7f, 0xe4, 0xec, 0x27, 0x50, 0x90, 0xa9, 0xe3, 0xf, 0xfb, 0xac, 0xa, 0x9c, 0xc8, 0x64, 0x21, 0x57, 0x10, 0xf5, 0x3c, 0x40, 0x5e, 0x9e, 0xc1, 0x2d, 0x8e, 0xce, 0x69, 0xeb, 0xca, 0x9e, 0x2b, 0x8a, 0x55, 0xe3, 0x6c, 0xa2, 0x42, 0xd7, 0x71, 0x31, 0xb7, 0x5e, 0x45, 0xb5, 0xb0, 0x2e, 0x34, 0x87, 0xe3, 0xa4, 0x1b, 0x4d, 0x51, 0x87, 0x3b, 0x98, 0x85, 0xc0, 0xb5, 0x30, 0x1a, 0x5b, 0x2e, 0x4d, 0xaa, 0xc8, 0x27, 0x3a, 0xac, 0xcd, 0x95, 0xa, 0xe4, 0xcb, 0x5a, 0x82, 0xba, 0x1d
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "Lgb9mDRPecxhpRXRBu//ayODxIo13YRX26Io7+dSFGP04vpppRU3U6eSre4fC7RROHcWf4WHaQ6Lp8d64p0H1g==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x40, 0xe9, 0x83, 0xae, 0xe1, 0x30, 0x7e, 0x2b, 0x62, 0x79, 0xaf, 0xe5, 0x33, 0x2f, 0xfc, 0x9e, 0x96, 0x4f, 0xf9, 0xbb, 0x5e, 0x83, 0xe3, 0xd, 0x3b, 0x78, 0x4d, 0xa1, 0x39, 0x7d, 0x68, 0xa3, 0xc7, 0x29, 0xa6, 0x97
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "49e92438-e3ad-4e75-85fd-bf2e6dde42a6")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0, 0xa2, 0x93, 0xf2
        ]
        XCTAssertTrue(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x12, 0xb1, 0x8a, 0xe4, 0xb6
        ]
        XCTAssertFalse(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x40, 0xe2
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x6, 0xb5, 0x87, 0xfb, 0x8c, 0x20, 0x21, 0x7a, 0x22, 0x43, 0xef, 0xec, 0x36, 0x66, 0xb1
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
