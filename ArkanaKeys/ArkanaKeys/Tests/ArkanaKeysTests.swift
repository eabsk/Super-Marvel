// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class KeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: KeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x40, 0x33, 0xc2, 0x37, 0xdd, 0xba, 0xd5, 0xa1, 0x30, 0x4a, 0xa5, 0x34, 0xae, 0xf0, 0x60, 0xaa, 0x99, 0xc9, 0x2e, 0xbc, 0x63, 0x4f, 0x55, 0xa3, 0xdb, 0x7, 0x80, 0xe4, 0x3b, 0x1, 0xb2, 0x46, 0x44, 0x9c, 0xa7, 0xf1, 0x38, 0xce, 0x64, 0x3d, 0x40, 0x4, 0x84, 0xfd, 0x79, 0x50, 0xc8, 0xbc, 0x66, 0x69, 0x14, 0x8d, 0xaa, 0x2f, 0xd4, 0x76, 0x8c, 0x7d, 0x7b, 0xe1, 0x1, 0x75, 0x70, 0xe1
        ]
        globalSecrets = Keys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x72, 0x1, 0xa7, 0x51, 0xbb, 0x8c, 0xb0, 0xc5, 0x54, 0x7c, 0x94, 0x2, 0x99, 0x96, 0x57, 0x93, 0xfc, 0xf0, 0x1d, 0x89, 0x1, 0x2a, 0x33, 0x9b, 0xb9, 0x33, 0xe6, 0xd4, 0x9, 0x38, 0xd1, 0x7e, 0x22, 0xf9, 0xc5, 0xc6, 0x1, 0xf7, 0, 0x5e, 0x74, 0x36, 0xe0, 0x9e, 0x4a, 0x62, 0xac, 0x8b, 0x4, 0xa, 0x27, 0xe9, 0x9f, 0x16, 0xe0, 0x4e, 0xbd, 0x1f, 0x1f, 0xd1, 0x37, 0x43, 0x44, 0x83, 0x73, 0x52, 0xf7, 0x51, 0xeb, 0x8d, 0xe3, 0x90, 0x1, 0x7f, 0x95, 0x51, 0xcf, 0xc8, 0x1, 0xce, 0xaa, 0xf1, 0x1c, 0xde, 0x7, 0x2a, 0x31, 0xc7, 0xe9, 0x61, 0xb3, 0xd1, 0x9, 0x60, 0x8b, 0x70, 0x71, 0xa5, 0x91, 0xc6, 0xd, 0xf6, 0x51, 0x4, 0x76, 0x62, 0xb2, 0xcc, 0x1c, 0x61, 0xae, 0xde, 0x56, 0x59, 0x22, 0xbe, 0xcf, 0x1a, 0xe0, 0x47, 0xb5, 0x1f, 0x43, 0xd5, 0x64, 0x42, 0x11, 0xd0
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "22eff6edd6167f79e935bef8b4f029c8feb799dc42dc32d7bc3d59481bd0664b3a5f6761150ea8ad382bdedd2f352a96596758596f61e1fb0063e5419b84e7a1")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x10, 0x4, 0x90, 0x6e, 0xb8, 0xf7, 0x91, 0xf4, 0x62, 0x65, 0xec, 0x7a, 0xfa, 0xbb, 0x1, 0xc5, 0xc8, 0x8a, 0x42, 0xc4, 0x16, 0x15, 0x37, 0xd4, 0x94, 0x30, 0xe9, 0xaf, 0x7a, 0x35, 0xff, 0x1f, 0x25, 0xd3, 0xf2, 0x86, 0x5c, 0x84, 0x56, 0xf, 0xe, 0x37, 0xb4, 0xc8, 0x3, 0x26, 0xa5, 0x8c, 0x3f, 0x3e, 0x55, 0xd4, 0xdc, 0x7c, 0x96, 0x2, 0xca, 0x9, 0xf, 0xd6, 0x6b, 0x1d, 0x2, 0xbb, 0x8, 0x71, 0xac, 0x72, 0xbf, 0xce, 0xe2, 0x91, 0x52, 0x21, 0xec, 0x7f, 0xcf, 0x87, 0x29, 0xc5, 0xe1, 0xaa, 0x1e, 0x8c, 0x12, 0x38, 0x68, 0x9e
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "P7RYeMDUR/INTKaoQClxuZbwO7iKA4MYaOUwdJ22N305zvm0YWAYvSBtFtt7jhrZHBnEbt70bkIKawIoxc00qw==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x24, 0x4, 0xf3, 0xf, 0xec, 0x83, 0xb4, 0xc4, 0x1d, 0x73, 0xc7, 0x50, 0x9e, 0xdd, 0x54, 0xc9, 0xfa, 0xfc, 0x3, 0x85, 0x6, 0x2e, 0x66, 0x8e, 0xef, 0x66, 0xb6, 0xd3, 0x59, 0x30, 0xd4, 0x76, 0x73, 0xff, 0xc2, 0xc6
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "d71819ae-9bd0-4cc5-9ea3-4a67b1f07ce7")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x34, 0x41, 0xb7, 0x52
        ]
        XCTAssertTrue(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x26, 0x52, 0xae, 0x44, 0xb8
        ]
        XCTAssertFalse(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x74, 0x1
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x32, 0x56, 0xa3, 0x5b, 0x82, 0x9e, 0xb9, 0xc8, 0x5d, 0x15, 0xd6, 0x5c, 0xcf, 0x94, 0x19
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
