// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum Keys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x74, 0xd0, 0xe6, 0x97, 0xd3, 0x4, 0x4d, 0x13, 0x4f, 0x1c, 0x9c, 0x84, 0x57, 0x2, 0xc8, 0xfb, 0xa1, 0x7a, 0xd4, 0x83, 0x6b, 0xe5, 0x87, 0x20, 0x59, 0x1e, 0x7f, 0xc4, 0xf, 0x19, 0xc, 0xc6, 0xf3, 0x1b, 0xc7, 0xa1, 0x5e, 0xc0, 0xae, 0xcd, 0x6d, 0xcd, 0x5, 0xd3, 0x58, 0xd4, 0x32, 0xa7, 0x1, 0x63, 0xe2, 0x6d, 0x10, 0x83, 0xd5, 0x7d, 0x46, 0xe2, 0xd7, 0xc2, 0x58, 0x7a, 0x3, 0xd5
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension Keys {
    struct Global: KeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let marvelPublicKey: String = {
            let encoded: [UInt8] = [
                0x11, 0xe9, 0xd3, 0xae, 0xb1, 0x32, 0x7d, 0x20, 0x2d, 0x7f, 0xf9, 0xe7, 0x66, 0x31, 0xf9, 0xcc, 0x93, 0x49, 0xb1, 0xb7, 0xe, 0xd3, 0xb2, 0x11, 0x6e, 0x26, 0x4b, 0xa5, 0x6b, 0x2a, 0x38, 0xf6
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let marvelPrivateKey: String = {
            let encoded: [UInt8] = [
                0x46, 0xe0, 0xd2, 0xa2, 0xb2, 0x34, 0x2f, 0x23, 0x7d, 0x2e, 0xfa, 0xb2, 0x66, 0x61, 0xa9, 0x9d, 0xc5, 0x49, 0xe0, 0xb0, 0x9, 0x86, 0xb3, 0x19, 0x6b, 0x2c, 0x1e, 0xa7, 0x3a, 0x7c, 0x6e, 0xf4, 0xc0, 0x2b, 0xf6, 0xc5, 0x3c, 0xa6, 0x99, 0xae
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let marvelHashKey: String = {
            let encoded: [UInt8] = [
                0x46, 0xb5, 0xd4, 0xa2, 0xb1, 0x67, 0x7f, 0x77, 0x78, 0x2a, 0xaf, 0xe2, 0x6e, 0x31, 0xfb, 0x99, 0x97, 0x1c, 0xe2, 0xb2, 0x5d, 0x87, 0xe3, 0x14, 0x3d, 0x2e, 0x1d, 0xf3, 0x39, 0x29, 0x3e, 0xf5
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let marvelTimeStamp: Int = {
            let encoded: [UInt8] = [
                0x45, 0xe6, 0xdf, 0xa6, 0xe6, 0x36, 0x75, 0x20, 0x7d, 0x2a
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()
    }
}

public extension Keys {
    struct Debug: KeysEnvironmentProtocol {
        public init() {}
    }
}
public extension Keys {
    struct Release: KeysEnvironmentProtocol {
        public init() {}
    }
}
