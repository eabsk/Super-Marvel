// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum Keys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x40, 0x33, 0xc2, 0x37, 0xdd, 0xba, 0xd5, 0xa1, 0x30, 0x4a, 0xa5, 0x34, 0xae, 0xf0, 0x60, 0xaa, 0x99, 0xc9, 0x2e, 0xbc, 0x63, 0x4f, 0x55, 0xa3, 0xdb, 0x7, 0x80, 0xe4, 0x3b, 0x1, 0xb2, 0x46, 0x44, 0x9c, 0xa7, 0xf1, 0x38, 0xce, 0x64, 0x3d, 0x40, 0x4, 0x84, 0xfd, 0x79, 0x50, 0xc8, 0xbc, 0x66, 0x69, 0x14, 0x8d, 0xaa, 0x2f, 0xd4, 0x76, 0x8c, 0x7d, 0x7b, 0xe1, 0x1, 0x75, 0x70, 0xe1
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension Keys {
    struct Global: KeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let marvelPublicKey: String = {
            let encoded: [UInt8] = [
                0x25, 0xa, 0xf7, 0xe, 0xbf, 0x8c, 0xe5, 0x92, 0x52, 0x29, 0xc0, 0x57, 0x9f, 0xc3, 0x51, 0x9d, 0xab, 0xfa, 0x4b, 0x88, 0x6, 0x79, 0x60, 0x92, 0xec, 0x3f, 0xb4, 0x85, 0x5f, 0x32, 0x86, 0x76
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let marvelPrivateKey: String = {
            let encoded: [UInt8] = [
                0x72, 0x3, 0xf6, 0x2, 0xbc, 0x8a, 0xb7, 0x91, 0x2, 0x78, 0xc3, 0x2, 0x9f, 0x93, 0x1, 0xcc, 0xfd, 0xfa, 0x1a, 0x8f, 0x1, 0x2c, 0x61, 0x9a, 0xe9, 0x35, 0xe1, 0x87, 0xe, 0x64, 0xd0, 0x74, 0x77, 0xac, 0x96, 0x95, 0x5a, 0xa8, 0x53, 0x5e
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let marvelHashKey: String = {
            let encoded: [UInt8] = [
                0x72, 0x56, 0xf0, 0x2, 0xbf, 0xd9, 0xe7, 0xc5, 0x7, 0x7c, 0x96, 0x52, 0x97, 0xc3, 0x53, 0xc8, 0xaf, 0xaf, 0x18, 0x8d, 0x55, 0x2d, 0x31, 0x97, 0xbf, 0x37, 0xe2, 0xd3, 0xd, 0x31, 0x80, 0x75
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()

        @inline(__always)
        public let marvelTimeStamp: Int = {
            let encoded: [UInt8] = [
                0x71, 0x5, 0xfb, 0x6, 0xe8, 0x88, 0xed, 0x92, 0x2, 0x7c
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()
    }
}

public extension Keys {
    struct Debug: KeysEnvironmentProtocol {
        public init() {}
    }
}
public extension Keys {
    struct Release: KeysEnvironmentProtocol {
        public init() {}
    }
}
